{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "type": "object",
  "properties": {
    "discrete_inputs": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9_.+-@]+$": {
          "type": "object",
          "properties": {
            "address": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            }
          },
          "required": [
            "address",
            "description"
          ]
        }
      },
      "uniqueItems": true
    },
    "discrete_outputs": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9_.+-@]+$": {
          "type": "object",
          "properties": {
            "address": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            }
          },
          "required": [
            "address",
            "description"
          ]
        }
      },
      "uniqueItems": true
    },
    "input_registers": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9_.+-@]+$": {
          "type": "object",
          "properties": {
            "address": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "type": {
              "enum": [
                "int16",
                "int32",
                "uint32",
                "float",
                "byte",
                "boolean"
              ]
            },
            "unit": {
              "type": "string"
            },
            "factor": {
              "type": "number"
            },
            "error_correction": {
              "type": "object",
              "properties": {
                "equation": {
                  "type": "string",
                  "description": "This string will be parsed by eval(). Use 'x' for the sensor value. eval() is restricted to the following functions: acos, asin, atan, atan2, ceil, cos, cosh, degrees, e, exp, fabs, floor, fmod, frexp, hypot, ldexp, log, log10, modf, pi, pow, radians, sin, sinh, sqrt, tan, tanh"
                },
                "description": {
                  "type": "string",
                  "description": "description of the equation"
                }
              },
              "required": [
                "equation"
              ]
            }
          },
          "required": [
            "address",
            "description",
            "type",
            "unit",
            "factor"
          ]
        }
      },
      "uniqueItems": true
    },
    "output_registers": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9_.+-@]+$": {
          "type": "object",
          "properties": {
            "address": {
              "type": "integer"
            },
            "description": {
              "type": "string"
            },
            "type": {
              "enum": [
                "int16",
                "int32",
                "uint32",
                "float",
                "byte",
                "boolean"
              ]
            },
            "unit": {
              "type": "string"
            },
            "factor": {
              "type": "number"
            },
            "error_correction": {
              "type": "object",
              "properties": {
                "equation": {
                  "type": "string",
                  "description": "This string will be parsed by eval(). Use 'x' for the sensor value. eval() is restricted to the following functions: acos, asin, atan, atan2, ceil, cos, cosh, degrees, e, exp, fabs, floor, fmod, frexp, hypot, ldexp, log, log10, modf, pi, pow, radians, sin, sinh, sqrt, tan, tanh"
                },
                "description": {
                  "type": "string",
                  "description": "description of the equation"
                }
              },
              "required": [
                "equation"
              ]
            }
          },
          "required": [
            "address",
            "description",
            "type",
            "unit",
            "factor"
          ]
        }
      },
      "uniqueItems": true
    }
  },
  "required": [
    "discrete_inputs",
    "discrete_outputs",
    "input_registers",
    "output_registers"
  ]
}